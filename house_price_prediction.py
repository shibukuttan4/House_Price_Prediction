# -*- coding: utf-8 -*-
"""House Price prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MvIoahZ2pzEaDQWHbS6aW2KdzhODfYZi

Importing Dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn.datasets
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics
from sklearn.datasets import fetch_california_housing

"""Importing the Boston House Price Dataset"""

house_price_dataset = fetch_california_housing()

print(house_price_dataset)

# Loading the dataset to Pandas Dataframe
house_price_dataframe = pd.DataFrame(house_price_dataset.data,columns = house_price_dataset.feature_names)

house_price_dataframe.head()

# add the target (price) column to the DataFrame
house_price_dataframe['price'] =house_price_dataset.target

house_price_dataframe.head()

# checking the number of rows and columns in the DataFrame
house_price_dataframe.shape

# checking for miss values
house_price_dataframe.isnull().sum()

# statistical measures of the dataset
house_price_dataframe.describe()

"""Understanding the correlation between various features in the dataset

1. Positive Correlation

2. Negative Correlation
"""

correlation = house_price_dataframe.corr()

# Constructing a heatmap to understand the correlation
plt.figure(figsize=(10,10))
sns.heatmap(correlation, cbar=True, square=True, fmt='.1f', annot=True, annot_kws={'size':8}, cmap='Blues')

"""Spliting the data and Target"""

X = house_price_dataframe.drop(['price'],axis=1)
Y = house_price_dataframe['price']

print(X)
print(Y)

"""Splitting the data into Training data and Test Data"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2, random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Model Training

XGBoost Regressor[link text](https://)
"""

# Loading the Model
model = XGBRegressor()

#  Training the model with X_train
model.fit(X_train,Y_train)

"""Evaluation

Prediction on Training data
"""

# accuracy for prediction on training data
training_data_prediction= model.predict(X_train)

print(training_data_prediction)

# R squared error
score_1= metrics.r2_score(Y_train,training_data_prediction)

# Mean Absolute Error
score_2= metrics.mean_absolute_error(Y_train,training_data_prediction)

print("R squared error :",score_1)
print("Mean Absolute Error:",score_2)

"""Visualizing the actual Prices and Predicted prices"""

print("Size of x:", len(X))
print("Size of y:", len(Y))

plt.scatter(Y_train, model.predict(X_train))
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual Price vs Predicted Prices")
plt.show()

"""Prediction on Test Data"""

# accuracy for prediction on test data
test_data_prediction= model.predict(X_test)

# R squared error
score_1= metrics.r2_score(Y_test,test_data_prediction)

# Mean Absolute Error
score_2= metrics.mean_absolute_error(Y_test,test_data_prediction)

print("R squared error :",score_1)
print("Mean Absolute Error:",score_2)